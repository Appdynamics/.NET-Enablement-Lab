//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontEnd.DevicesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceContext", Namespace="http://schemas.datacontract.org/2004/07/MiddleTier")]
    [System.SerializableAttribute()]
    public partial class DeviceContext : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Family {
            get {
                return this.FamilyField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyField, value) != true)) {
                    this.FamilyField = value;
                    this.RaisePropertyChanged("Family");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://appdynamics.com/Demo", ConfigurationName="DevicesService.DevicesService")]
    public interface DevicesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDevices", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDevicesResponse")]
        FrontEnd.DevicesService.DeviceContext[] GetDevices(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDevices", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDevicesResponse")]
        System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext[]> GetDevicesAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetUserDevices", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetUserDevicesResponse")]
        FrontEnd.DevicesService.DeviceContext[] GetUserDevices(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetUserDevices", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetUserDevicesResponse")]
        System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext[]> GetUserDevicesAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDevice", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDeviceResponse")]
        FrontEnd.DevicesService.DeviceContext GetDevice(string userId, string deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDevice", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDeviceResponse")]
        System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext> GetDeviceAsync(string userId, string deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDeviceSettings", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDeviceSettingsResponse")]
        string GetDeviceSettings(string userId, string deviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="GetDeviceSettings", ReplyAction="http://appdynamics.com/Demo/DevicesService/GetDeviceSettingsResponse")]
        System.Threading.Tasks.Task<string> GetDeviceSettingsAsync(string userId, string deviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateDeviceSettings", ReplyAction="http://appdynamics.com/Demo/DevicesService/UpdateDeviceSettingsResponse")]
        string UpdateDeviceSettings(string userId, string deviceID, string settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="UpdateDeviceSettings", ReplyAction="http://appdynamics.com/Demo/DevicesService/UpdateDeviceSettingsResponse")]
        System.Threading.Tasks.Task<string> UpdateDeviceSettingsAsync(string userId, string deviceID, string settings);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DevicesServiceChannel : FrontEnd.DevicesService.DevicesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DevicesServiceClient : System.ServiceModel.ClientBase<FrontEnd.DevicesService.DevicesService>, FrontEnd.DevicesService.DevicesService {
        
        public DevicesServiceClient() {
        }
        
        public DevicesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DevicesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DevicesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DevicesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FrontEnd.DevicesService.DeviceContext[] GetDevices(string userId) {
            return base.Channel.GetDevices(userId);
        }
        
        public System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext[]> GetDevicesAsync(string userId) {
            return base.Channel.GetDevicesAsync(userId);
        }
        
        public FrontEnd.DevicesService.DeviceContext[] GetUserDevices(string userId) {
            return base.Channel.GetUserDevices(userId);
        }
        
        public System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext[]> GetUserDevicesAsync(string userId) {
            return base.Channel.GetUserDevicesAsync(userId);
        }
        
        public FrontEnd.DevicesService.DeviceContext GetDevice(string userId, string deviceId) {
            return base.Channel.GetDevice(userId, deviceId);
        }
        
        public System.Threading.Tasks.Task<FrontEnd.DevicesService.DeviceContext> GetDeviceAsync(string userId, string deviceId) {
            return base.Channel.GetDeviceAsync(userId, deviceId);
        }
        
        public string GetDeviceSettings(string userId, string deviceID) {
            return base.Channel.GetDeviceSettings(userId, deviceID);
        }
        
        public System.Threading.Tasks.Task<string> GetDeviceSettingsAsync(string userId, string deviceID) {
            return base.Channel.GetDeviceSettingsAsync(userId, deviceID);
        }
        
        public string UpdateDeviceSettings(string userId, string deviceID, string settings) {
            return base.Channel.UpdateDeviceSettings(userId, deviceID, settings);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDeviceSettingsAsync(string userId, string deviceID, string settings) {
            return base.Channel.UpdateDeviceSettingsAsync(userId, deviceID, settings);
        }
    }
}
